/* ###################################################################
 **     Filename    : main.c
 **     Project     : LAB9
 **     Processor   : MK22FN512VDC12
 **     Version     : Driver 01.01
 **     Compiler    : GNU C Compiler
 **     Date/Time   : 2017-09-28, 08:59, # CodeGen: 0
 **     Abstract    :
 **         Main module.
 **         This module contains user's application code.
 **     Settings    :
 **     Contents    :
 **         No public methods
 **
 ** ###################################################################*/
/*!
 ** @file main.c
 ** @version 01.01
 ** @brief
 **         Main module.
 **         This module contains user's application code.
 */
/*!
 **  @addtogroup main_module main module documentation
 **  @{
 */
/* MODULE main */


/* Including needed modules to compile this module/procedure */
#include "Cpu.h"
#include "Events.h"
#include "Pins1.h"
#include "TU1.h"
#include "Red.h"
#include "BitIoLdd1.h"
#include "Green.h"
#include "BitIoLdd2.h"
#include "Blue.h"
#include "BitIoLdd3.h"
#include "FC321.h"
#include "RealTimeLdd1.h"
/* Including shared modules, which are used for whole project */
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"
#include "PDD_Includes.h"
#include "Init_Config.h"
/* User includes (#include below this line is not maintained by Processor Expert) */

/*lint -save  -e970 Disable MISRA rule (6.3) checking. */
int main(void)
/*lint -restore Enable MISRA rule (6.3) checking. */
{
	/* Write your local variable definition here */

	/*** Processor Expert internal initialization. DON'T REMOVE THIS CODE!!! ***/
	PE_low_level_init();
	/*** End of Processor Expert internal initialization.                    ***/

	/* Write your code here */

	void transmit0(){
		byte err;
		word time;
		FC321_Reset();
		//
		FC321_GetTimeMS(&time);
		Green_ClrVal();
		Red_ClrVal();
		Blue_ClrVal();

		while(time < 40){
			FC321_GetTimeMS(&time);
		}
		//

		Blue_SetVal();
		Green_SetVal();
		Red_SetVal();
		FC321_Reset();
		FC321_GetTimeMS(&time);
		while(time < 40){
			FC321_GetTimeMS(&time);
		}
		//err = FC321_GetTimeMS(&time);
		if(err == ERR_OK){

		} else{}
	}
	void idle(){
		byte err;
		word time;
		FC321_Reset();
		//
		FC321_GetTimeMS(&time);
		Green_ClrVal();
		Red_ClrVal();
		Blue_ClrVal();

		while(time < 500){
			FC321_GetTimeMS(&time);
		}
		//

		Blue_SetVal();
		Green_SetVal();
		Red_SetVal();
		FC321_Reset();
		FC321_GetTimeMS(&time);
		while(time < 500){
			FC321_GetTimeMS(&time);
		}
		//err = FC321_GetTimeMS(&time);
		if(err == ERR_OK){

		} else{}
	}
	void transmit1(){
		byte err;
		word time;
		FC321_Reset();
		//
		FC321_GetTimeMS(&time);
		Green_ClrVal();
		Red_ClrVal();
		Blue_ClrVal();
		while(time < 60){
			FC321_GetTimeMS(&time);
		}
		//

		Blue_SetVal();
		Green_SetVal();
		Red_SetVal();
		FC321_Reset();
		FC321_GetTimeMS(&time);
		while(time < 60){
			FC321_GetTimeMS(&time);
		}
		//err = FC321_GetTimeMS(&time);
		if(err == ERR_OK){

		} else{}
	}

	for(;;){
		idle();
	}
	/* For example: for(;;) { } */

	/*** Don't write any code pass this line, or it will be deleted during code generation. ***/
	/*** RTOS startup code. Macro PEX_RTOS_START is defined by the RTOS component. DON'T MODIFY THIS CODE!!! ***/
#ifdef PEX_RTOS_START
	PEX_RTOS_START();                  /* Startup of the selected RTOS. Macro is defined by the RTOS component. */
#endif
	/*** End of RTOS startup code.  ***/
	/*** Processor Expert end of main routine. DON'T MODIFY THIS CODE!!! ***/
	for(;;){}
	/*** Processor Expert end of main routine. DON'T WRITE CODE BELOW!!! ***/
} /*** End of main routine. DO NOT MODIFY THIS TEXT!!! ***/

/* END main */
/*!
 ** @}
 */
/*
 ** ###################################################################
 **
 **     This file was created by Processor Expert 10.5 [05.21]
 **     for the Freescale Kinetis series of microcontrollers.
 **
 ** ###################################################################
 */
